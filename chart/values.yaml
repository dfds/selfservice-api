# Default values for selfservice-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
managedByHelm: true
environment: "develop"

image:
  repository: 579478677147.dkr.ecr.eu-central-1.amazonaws.com/selfservice-api/app
  pullPolicy: Always
  tag: "latest"

app:
  config:
    kafkaSecretRef: kafka-credentials
    topdeskSecretRef: selfservice-api-topdesk
    msgraphSecretRef: selfservice-api-msgraph
    platformdataSecretRef: selfservice-api-platformdata
    ecrPullPermissionAwsAccountId: "123456789"

  environment:
    - name: SS_CONNECTION_STRING
      valueFrom:
        secretKeyRef:
          name: selfservice-api-postgres
          key: PGCONNSTRING
    - name: DEFAULT_KAFKA_GROUP_ID
      value: build.selfservice.selfservice-api
    - name: SS_APISPECS_TOPIC
      value: cloudengineering.selfservice.apispecs
    - name: SS_PROMETHEUS_API_ENDPOINT
      value: http://monitoring-kube-prometheus-prometheus.monitoring:9090
    - name: "DEFAULT_KAFKA_ENABLE_AUTO_COMMIT"
      value: "false"
    - name: "SS_ARM_ENABLED"
      value: "false"
    - name: "SS_ARM_TEMPORARY_REPO_PATH"
      value: "/tmp/ssu-azure-rg-manifests"
    - name: "SS_ARM_REMOTE_REPO_URI"
      value: "${SS_ARM_REMOTE_REPO_URI}"
    - name: "SS_ARM_GIT_USERNAME"
      value: "selfservice-api"
    - name: "SS_ARM_GIT_EMAIL"
      value: "ssu@dfds.cloud"
    - name: "SS_ARM_GIT_BRANCH"
      value: "master"

gendis:
  enabled: true
  fullNameOverrride: ""
  image:
    repository: dfdsdk/dafda-gendis
    pullPolicy: Always
    tag: "v0.9.2"
  service:
    type: ClusterIP
    port: 5225
  environment:
    - name: DAFDA_OUTBOX_NOTIFICATION_CHANNEL
      value: dafda_outbox
    - name: GENDIS_PREFIX_FOR_KAFKA
      value: DEFAULT_KAFKA_
    - name: DB_CONNECTION_STRING
      valueFrom:
        secretKeyRef:
          name: selfservice-api-postgres
          key: PGCONNSTRING
  resources:
    requests:
      memory: "50Mi"
      cpu: "50m"
    limits:
      memory: "200Mi"
      cpu: "200m"
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

dbMigration:
  secretRef: selfservice-api-postgres
  image:
    repository: 579478677147.dkr.ecr.eu-central-1.amazonaws.com/selfservice-api/dbmigrations
    pullPolicy: Always
    tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  awsRoleArn: ""
  # Annotations to add to the service account
  annotations:
    eks.amazonaws.com/sts-regional-endpoints: "true"
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  metricsPort: 8888
  scrapeMetrics: true

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  match: Host(`localhost`)
  matches:
    - name: selfservice-api
      match: Host(`build.dfds.cloud`) && PathPrefix(`/api`)
      priority: 101
      prefix: "/api"
    - name: selfservice-api-pub
      match: Host(`api.hellman.oxygen.dfds.cloud`) && PathPrefix(`/ssu/api`)
      prefix: "/ssu/api"
  middlewares: []
  services: []
  routes: []
    # - kind: Rule
    #   match: Host(`build.dfds.cloud`)
    #   priority: 90
    #   middlewares: []
    #   services:
    #     - kind: Service
    #       name: selfservice-api
    #       namespace: selfservice
    #       port: external

resources:
  requests:
    memory: "50Mi"
    cpu: "50m"
  limits:
    memory: "200Mi"
    cpu: "200m"


nodeSelector: {}

tolerations: []

affinity: {}
