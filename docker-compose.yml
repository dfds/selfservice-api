version: "3.8"

services:

  database:
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=p
    healthcheck:
      test: "pg_isready -h localhost -p 5432 -U postgres"
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgup:
    build: ./db
    depends_on:
      database:
        condition: service_healthy
    # volumes:
    # - ${PWD}/db/export:/tmp
    environment:
      # - DEBUG=1                     # enable script debugging
      - SEED_CSV_SEPARATOR=;          # NOTE: csv delimiter overwritten
      - LOCAL_DEVELOPMENT=1           # will CREATE DATABASE ${PGDATABASE} every time
      - PGDATABASE=db                 # database name
      - PGHOST=database               # docker compose service name
      - PGUSER=postgres               # same as above
      - PGPASSWORD=p                  # same as above
      - PGSSLMODE=disable             # ignore SSLMODE for local development

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: "cub kafka-ready -b localhost:9092 1 2"
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-setup:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c '
      # Blocks until kafka is reachable
      echo -e "Waiting for kafka to be reachable"
      kafka-topics --bootstrap-server kafka:29092 --list > /dev/null

      declare -a topics=(
        "cloudengineering.selfservice.apispecs"
        "cloudengineering.selfservice.capability"
        "cloudengineering.selfservice.membership"
        "cloudengineering.selfservice.member"
        "cloudengineering.selfservice.membershipapplication"
        "cloudengineering.selfservice.awsaccount"
        "cloudengineering.selfservice.kafkaclusteraccess"
        "cloudengineering.selfservice.kafkatopic"
        "cloudengineering.selfservice.messagecontract"
        "cloudengineering.selfservice.portalvisit"
        "cloudengineering.confluentgateway.provisioning"
        "cloudengineering.confluentgateway.schema"
        "cloudengineering.confluentgateway.access"
        "build.selfservice.events.capabilities"
      )
      
      total_topics=$${#topics[@]}
      completed_topics=0
      
      for topic in $${topics[@]}; do
        ((completed_topics++))
        echo -e "Creating topic: $$topic ($$completed_topics/$$total_topics)"
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic $$topic
        if [ $$? -eq 0 ]; then
          echo -e "Successfully created topic: $$topic"
        else
          echo -e "Failed to create topic: $$topic"
        fi
      done

      echo -e "Success!"
      '
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  gendis:
    image: public.ecr.aws/d8r0z9h2/dafda-gendis:0.9.0
    depends_on:
      database:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    environment:
      - DB_CONNECTION_STRING=User ID=postgres;Password=p;Host=database;Port=5432;Database=db;
      - DAFDA_OUTBOX_NOTIFICATION_CHANNEL=dafda_outbox
      - GENDIS_PREFIX_FOR_KAFKA=GENDIS_KAFKA_
      - GENDIS_KAFKA_BOOTSTRAP_SERVERS=kafka:29092

  fake-confluent-gateway:
    build: ./fake_dependencies/confluent-gateway
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
    volumes:
      - ./fake_dependencies/confluent-gateway/FakeConfluentGateway.App:/app
    environment:
      - DEFAULT_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DEFAULT_KAFKA_GROUP_ID=selfservice.consumer.fake

    ports:
      - 5051:5051
  fake-platform-data-api:
    build: ./fake_dependencies/platform-data-api
    ports:
      - "8070:8070"
